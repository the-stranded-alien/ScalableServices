services:
  common-library:
    build:
      context: ./common-library
      dockerfile: Dockerfile
    image: common-library:latest
    container_name: common-library
    volumes:
      - maven-repo:/root/.m2
    command: echo "Common library built successfully"

  eureka-server:
    build:
      context: .
      dockerfile: ./eureka-server/Dockerfile
    container_name: eureka-server
    depends_on:
      common-library:
        condition: service_completed_successfully
    volumes:
      - maven-repo:/root/.m2
    ports:
      - "8761:8761"
    environment:
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
      - EUREKA_INSTANCE_HOSTNAME=eureka-server
      - MANAGEMENT_METRICS_BINDERS_PROCESSOR_ENABLED=false
    restart: on-failure

  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: bookingdb
      MYSQL_USER: admin
      MYSQL_PASSWORD: amAdmin123
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "admin", "-pamAdmin123"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mongo:
    image: mongo:6.0
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d userdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  hotel-service:
    build:
      context: .
      dockerfile: ./hotel-service/Dockerfile
    container_name: hotel-service
    depends_on:
      common-library:
        condition: service_completed_successfully
      mongo:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_started
    volumes:
      - maven-repo:/root/.m2
    ports:
      - "8082:8082"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://mongo:27017/hotel-db
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://eureka-server:8761/eureka/
    restart: on-failure

  notification-service:
    build:
      context: .
      dockerfile: ./notification-service/Dockerfile
    container_name: notification-service
    ports:
      - "8083:8083"
    depends_on:
      common-library:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_started
      eureka-server:
        condition: service_started
    volumes:
      - maven-repo:/root/.m2
    environment:
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch:9200
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE=http://eureka-server:8761/eureka/
    restart: on-failure

  user-service:
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    container_name: user-service
    depends_on:
      common-library:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      eureka-server:
        condition: service_started
    volumes:
      - maven-repo:/root/.m2
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/userdb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      JWT_SECRET: MySuperSecretKey12345678910ThatIsLongEnough
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://eureka-server:8761/eureka/
    restart: on-failure

  booking-service:
    build:
      context: .
      dockerfile: ./booking-service/Dockerfile
    container_name: booking-service
    depends_on:
      common-library:
        condition: service_completed_successfully
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_started
    volumes:
      - maven-repo:/root/.m2
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/bookingdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: amAdmin123
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL8Dialect
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: http://eureka-server:8761/eureka/
    restart: on-failure

  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    container_name: api-gateway
    depends_on:
      common-library:
        condition: service_completed_successfully
      user-service:
        condition: service_started
      booking-service:
        condition: service_started
      hotel-service:
        condition: service_started
      notification-service:
        condition: service_started
      eureka-server:
        condition: service_started
    volumes:
      - maven-repo:/root/.m2
    ports:
      - "8084:8084"
    environment:
      - SPRING_CLOUD_GATEWAY_ROUTES_0_ID=user-service
      - SPRING_CLOUD_GATEWAY_ROUTES_0_URI=http://user-service:8080
      - SPRING_CLOUD_GATEWAY_ROUTES_0_PREDICATES_0=Path=/api/user/**
      - SPRING_CLOUD_GATEWAY_ROUTES_1_ID=booking-service
      - SPRING_CLOUD_GATEWAY_ROUTES_1_URI=http://booking-service:8081
      - SPRING_CLOUD_GATEWAY_ROUTES_1_PREDICATES_0=Path=/api/booking/**
      - SPRING_CLOUD_GATEWAY_ROUTES_2_ID=hotel-service
      - SPRING_CLOUD_GATEWAY_ROUTES_2_URI=http://hotel-service:8082
      - SPRING_CLOUD_GATEWAY_ROUTES_2_PREDICATES_0=Path=/api/hotel/**
      - SPRING_CLOUD_GATEWAY_ROUTES_3_ID=notification-service
      - SPRING_CLOUD_GATEWAY_ROUTES_3_URI=http://notification-service:8083
      - SPRING_CLOUD_GATEWAY_ROUTES_3_PREDICATES_0=Path=/api/notification/**
      - JWT_SECRET=MySuperSecretKey12345678910ThatIsLongEnough
      - EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE=http://eureka-server:8761/eureka/
    restart: on-failure

  hotel-ui:
    build: ./hotel-management-ui
    container_name: hotel-ui
    depends_on:
      api-gateway:
        condition: service_started
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://api-gateway:8084

volumes:
  mongo_data:
  elastic_data:
  postgres_data:
  mysql_data:
  maven-repo:
